{"version":3,"file":"bundle.js","mappings":"mBAEe,MAAeA,EAK1BC,YACIC,EACAC,EACAC,EACAC,GAEAC,KAAKC,gBAAkBC,SAASC,eAAeP,GAC/CI,KAAKI,YAAcF,SAASC,eAAeN,GAE3C,MAAMQ,EAAeH,SAASI,WAC1BN,KAAKC,gBAAgBM,SACrB,GAEJP,KAAKQ,QAAUH,EAAaI,kBACxBV,IACAC,KAAKQ,QAAQE,GAAKX,GAGtBC,KAAKW,OAAOb,GAGRa,OAAOC,GACXZ,KAAKI,YAAYS,sBACbD,EAAoB,aAAe,YACnCZ,KAAKQ,UClBV,SAASM,EAASC,GACrB,IAAIC,GAAU,EA2Bd,OAzBID,EAAiBE,WACjBD,EAAUA,GAA+D,IAApDD,EAAiBG,MAAMC,WAAWC,OAAOC,QAIhC,MAA9BN,EAAiBO,WACiB,iBAA3BP,EAAiBG,QAExBF,EAAUA,GAAWD,EAAiBG,MAAMG,QAAUN,EAAiBO,WAIzC,MAA9BP,EAAiBQ,WACiB,iBAA3BR,EAAiBG,QAExBF,EAAUA,GAAWD,EAAiBG,MAAMG,QAAUN,EAAiBQ,WAG/C,MAAxBR,EAAiBS,KAAiD,iBAA3BT,EAAiBG,QACxDF,EAAUA,GAAWD,EAAiBG,MAAQH,EAAiBS,KAGvC,MAAxBT,EAAiBU,KAAiD,iBAA3BV,EAAiBG,QACxDF,EAAUA,GAAWD,EAAiBG,MAAQH,EAAiBU,KAE5DT,ECvCJ,SAASU,EAEZC,EACAC,EACAC,GAEA,MAAMC,EAAiBD,EAAWX,MAQlC,MAP0C,CACtCa,cAAc,EACdC,MAEI,OADgBF,EAAeG,KAAKjC,QCThD,IAAYkC,GAAZ,SAAYA,GACR,uBACA,2BAFJ,CAAYA,IAAAA,EAAa,KAKlB,MAAMC,EACTxC,YACWe,EACA0B,EACAC,EACAC,EACAC,GAJA,KAAA7B,GAAAA,EACA,KAAA0B,MAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,OAAAA,EACA,KAAAC,OAAAA,GCAR,MAAMC,UARb,oBACc,KAAAC,UAA2B,GAErCC,YAAYC,GACR3C,KAAKyC,UAAUG,KAAKD,KAQxB,cACIE,QAJI,KAAAC,SAAsB,GAQ9BC,qBACI,OAAI/C,KAAKgD,WAGThD,KAAKgD,SAAW,IAAIR,GAFTxC,KAAKgD,SAMpBC,WAAWb,EAAeC,EAAqBa,GAC3C,MAAMC,EAAa,IAAIhB,EACnBiB,KAAKC,SAASlC,WACdiB,EACAC,EACAa,EACAhB,EAAcoB,QAElBtD,KAAK8C,SAASF,KAAKO,GACnBnD,KAAKuD,kBAGTC,YAAYC,EAAmBC,GAC3B,MAAMC,EAAU3D,KAAK8C,SAASc,MAAKC,GAAQA,EAAKnD,KAAO+C,IACnDE,GAAWA,EAAQpB,SAAWmB,IAC9BC,EAAQpB,OAASmB,EACjB1D,KAAKuD,mBAIbA,kBACI,IAAK,MAAMZ,KAAc3C,KAAKyC,UAC1BE,EAAW3C,KAAK8C,SAASgB,UAK9B,MAAMC,EAAevB,EAAawB,cCpDlC,MAAMC,UAAqBvE,EAK9BC,cACIkD,MAAM,gBAAiB,OAAO,EAAM,cACpC7C,KAAKkE,kBAAoBlE,KAAKQ,QAAQ2D,cAAc,UACpDnE,KAAKoE,wBAA0BpE,KAAKQ,QAAQ2D,cAAc,gBAC1DnE,KAAKqE,mBAAqBrE,KAAKQ,QAAQ2D,cAAc,WAErDnE,KAAKsE,YAGTA,YACItE,KAAKQ,QAAQ+D,iBAAiB,SAAUvE,KAAKwE,eAGjDC,iBAEQC,kBACJ,MAAMC,EAAe3E,KAAKkE,kBAAkBhD,MACtC0D,EAAqB5E,KAAKoE,wBAAwBlD,MAClD2D,EAAgB7E,KAAKqE,mBAAmBnD,MAMxC4D,EAAiD,CACnD5D,MAAO0D,EACP3D,UAAU,EACVK,UAAW,GAETyD,EAA4C,CAC9C7D,MAAO2D,EACP5D,UAAU,EACVO,IAAK,EACLC,IAAK,GAIT,OACK,EAlB4C,CAC7CP,MAAOyD,EACP1D,UAAU,KAiBT,EAAoB6D,IACpB,EAAoBC,GAKd,CAACJ,EAAcC,GAAqBC,QAH3CG,MAAM,8BAONC,cACJjF,KAAKkE,kBAAkBhD,MAAQ,GAC/BlB,KAAKoE,wBAAwBlD,MAAQ,GACrClB,KAAKqE,mBAAmBnD,MAAQ,GAI5BsD,cAAcU,GAClBA,EAAMC,iBACNnF,KAAK0E,kBACL,MAAMU,EAAYpF,KAAK0E,kBACvB,GAAIW,MAAMC,QAAQF,GAAY,CAC1B,MAAOhD,EAAOmD,EAAMjD,GAAU8C,EAE9BrB,EAAad,WAAWb,EAAOmD,EAAMjD,GACrCtC,KAAKiF,iB,0TARb,EADC,G,kCC5DE,MAAMO,UAAoB9F,EAY7BC,YAAY8F,EAAgB9B,GACxBd,MAAM,iBAAkB4C,GAAQ,EAAO9B,EAAQjD,IAC/CV,KAAK2D,QAAUA,EAEf3D,KAAKsE,YACLtE,KAAKyE,gBAbLiB,cACA,OAA4B,IAAxB1F,KAAK2D,QAAQrB,OACN,WAEA,GAAGtC,KAAK2D,QAAQrB,iBAa/BqD,iBAAiBT,GACbA,EAAMU,aAAcC,QAAQ,aAAc7F,KAAK2D,QAAQjD,IACvDwE,EAAMU,aAAcE,cAAgB,OAGxCC,eAAeb,GACXA,EAAMC,iBACNa,QAAQC,IAAI,WAGhB3B,YACItE,KAAKQ,QAAQ+D,iBAAiB,YAAavE,KAAK2F,kBAChD3F,KAAKQ,QAAQ+D,iBAAiB,UAAWvE,KAAK+F,gBAGlDtB,gBAEIzE,KAAKQ,QAAQ2D,cAAc,MAAO+B,YAAclG,KAAK2D,QAAQvB,MAC7DpC,KAAKQ,QAAQ2D,cAAc,MAAO+B,YAAclG,KAAK0F,QAAU,YAC/D1F,KAAKQ,QAAQ2D,cAAc,KAAM+B,YAAclG,KAAK2D,QAAQtB,c,0TAnBhE,EADCX,G,+WClBE,MAAMyE,UAAoBzG,EAG7BC,YAAoByG,GAChBvD,MAAM,eAAgB,OAAO,EAAO,GAAGuD,cADvB,KAAAA,KAAAA,EAEhBpG,KAAKqG,iBAAmB,GAExBrG,KAAKsE,YACLtE,KAAKyE,gBAIT6B,gBAAgBpB,GACRA,EAAMU,cAAgD,eAAhCV,EAAMU,aAAaW,MAAM,KAE/CrB,EAAMC,iBACSnF,KAAKQ,QAAQ2D,cAAc,MACnCqC,UAAUC,IAAI,cAK7BC,YAAYxB,GACRA,EAAMC,iBACN,MAAMwB,EAASzB,EAAMU,aAAcgB,QAAQ,cAC3C7C,EAAaP,YACTmD,EACc,WAAd3G,KAAKoG,KAAoBlE,EAAcoB,OAASpB,EAAc2E,UAKtEC,iBAAiB5B,GACbA,MAAAA,GAAAA,EAAOC,iBACQnF,KAAKQ,QAAQ2D,cAAc,MACnCqC,UAAUO,OAAO,aAG5BzC,YACItE,KAAKQ,QAAQ+D,iBAAiB,WAAYvE,KAAKsG,iBAC/CtG,KAAKQ,QAAQ+D,iBAAiB,YAAavE,KAAK8G,kBAChD9G,KAAKQ,QAAQ+D,iBAAiB,OAAQvE,KAAK0G,aAE3C3C,EAAarB,aAAaI,IACtB,MAAMkE,EAAmBlE,EAASmE,QAAOpD,GACnB,WAAd7D,KAAKoG,KACEvC,EAAKtB,SAAWL,EAAcoB,OAElCO,EAAKtB,SAAWL,EAAc2E,WAEzC7G,KAAKqG,iBAAmBW,EACxBhH,KAAKkH,oBAKbzC,gBACI,MAAM0C,EAAS,GAAGnH,KAAKoG,qBAEvBpG,KAAKQ,QAAQ2D,cAAc,MAAOzD,GAAKyG,EAEvCnH,KAAKQ,QAAQ2D,cAAc,MAAO+B,YAAclG,KAAKoG,KAAKgB,cAAgB,YAGtEF,iBACWhH,SAASC,eACpB,GAAGH,KAAKoG,sBAELiB,UAAY,GACnB,IAAK,MAAMC,KAAYtH,KAAKqG,iBACxB,IAAIb,EAAYxF,KAAKQ,QAAQ2D,cAAc,MAAOzD,GAAI4G,IA1D9D,GADC5F,G,oCAWD,GADCA,G,gCAWD,GADCA,G,qCCpCL,IAAIuC,EACJ,IAAIkC,EAAY,UAChB,IAAIA,EAAY,a","sources":["webpack://todo/./src/components/base-component.ts","webpack://todo/./src/util/validation.ts","webpack://todo/./src/decorators/autobind.ts","webpack://todo/./src/models/project.ts","webpack://todo/./src/state/project-state.ts","webpack://todo/./src/components/project-input.ts","webpack://todo/./src/components/project-item.ts","webpack://todo/./src/components/project-list.ts","webpack://todo/./src/app.ts"],"sourcesContent":["//Component base class(UI component)\n\nexport default abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n    templateElement: HTMLTemplateElement;\n    hostElement : T;\n    element: U;\n\n    constructor(\n        templateId: string, \n        hostElementId: string, \n        insertAtStart: boolean,\n        newElementId?: string\n    ) {\n        this.templateElement = document.getElementById(templateId)! as HTMLTemplateElement;\n        this.hostElement = document.getElementById(hostElementId)! as T;\n\n        const importedNode = document.importNode(\n            this.templateElement.content, \n            true\n        );\n        this.element = importedNode.firstElementChild as U;\n        if (newElementId) {\n            this.element.id = newElementId;\n        }\n\n        this.attach(insertAtStart);\n    }\n\n    private attach(insertAtBeginning: boolean) {\n        this.hostElement.insertAdjacentElement(\n            insertAtBeginning ? 'afterbegin' : 'beforeend', \n            this.element\n        );\n    }\n\n    abstract configure(): void;\n    abstract renderContent(): void;\n}","\n//Validation\nexport interface Validatable {\n    value: string | number;\n    required?: boolean; //? makes it optional\n    //checking lengths\n    minLength?: number;\n    maxLength?: number;\n    //checking numbers\n    min?: number;\n    max?: number;\n}\n\nexport function validate(validatableInput: Validatable) {\n    let isValid = true;\n    //checking if it is required\n    if (validatableInput.required) {\n        isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n    }\n    //checking if the input has a min length\n    if (\n        validatableInput.minLength != null && \n        typeof validatableInput.value === 'string'\n    )  {\n        isValid = isValid && validatableInput.value.length >= validatableInput.minLength;\n    }\n    //same but for max length\n    if (\n        validatableInput.maxLength != null && \n        typeof validatableInput.value === 'string'\n    )  {\n        isValid = isValid && validatableInput.value.length <= validatableInput.maxLength;\n    }\n    //checking min number\n    if (validatableInput.min != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value > validatableInput.min;\n    }\n    //checking max number\n    if (validatableInput.max != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value < validatableInput.max;\n    }\n    return isValid;\n}","\n//autobind decorator\nexport function autobind(\n    //using '_' to tell TS we dont need those two but we need to accept it in the fnc\n    _: any, \n    _2: string,\n    descriptor: PropertyDescriptor\n) {\n    const originalMethod = descriptor.value;\n    const adjDescriptor: PropertyDescriptor = {\n        configurable: true,\n        get() {\n            const boundFn = originalMethod.bind(this);\n            return boundFn;\n        }\n    };\n    return adjDescriptor;\n}","\n//Project Type (custom type class) - so it can be instansiated\n//using enums when we only have two things to choose from\nexport enum ProjectStatus { \n    Active, \n    Finished \n}\n\nexport class Project {\n    constructor(\n        public id: string, \n        public title: string, \n        public description: string, \n        public people: number,\n        public status: ProjectStatus\n    ) {};\n}","import { Project, ProjectStatus } from '../models/project';\n\n\n//Project State Managment\ntype Listener<T> = (items: T[]) => void;\n    \nclass State<T> {\n    protected listeners: Listener<T>[] = [];\n    \n    addListener(listenerFn: Listener<T>) {\n        this.listeners.push(listenerFn)\n    }\n}\n\nexport class ProjectState extends State<Project>{\n    private projects: Project[] = [];\n    private static instance: ProjectState;\n\n    private constructor() {\n        super();\n    }\n\n    //checking if this.instance is a thing, if not creating a new one\n    static getInstance() {\n        if (this.instance) {\n            return this.instance;\n        }\n        this.instance = new ProjectState();\n        return this.instance;\n    }\n\n    addProject(title: string, description: string, numOfPeople: number) {\n        const newProject = new Project(\n            Math.random().toString(),\n            title,\n            description,\n            numOfPeople,\n            ProjectStatus.Active\n        );\n        this.projects.push(newProject);\n        this.updateListeners();\n    }\n\n    moveProject(projectId: string, newStatus: ProjectStatus) {\n        const project = this.projects.find(proj => proj.id === projectId);\n        if (project && project.status !== newStatus) {\n            project.status = newStatus;\n            this.updateListeners();\n        }\n    }\n\n    updateListeners() {\n        for (const listenerFn of this.listeners) {\n            listenerFn(this.projects.slice());\n        }\n    }\n}\n\nexport const projectState = ProjectState.getInstance();","import Component  from './base-component';\nimport * as Validation from '../util/validation';\nimport { autobind as Autobind } from '../decorators/autobind';\nimport { projectState } from '../state/project-state';\n\n//project input class(renders input fields)\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n    titleInputElement: HTMLInputElement;\n    descriptionInputElement: HTMLInputElement;\n    peopleInputElement: HTMLInputElement;\n\n    constructor() {\n        super('project-input', 'app', true, 'user-input');\n        this.titleInputElement = this.element.querySelector('#title') as HTMLInputElement;\n        this.descriptionInputElement = this.element.querySelector('#description') as HTMLInputElement;\n        this.peopleInputElement = this.element.querySelector('#people') as HTMLInputElement;\n\n        this.configure(); \n    }\n\n    configure() {\n        this.element.addEventListener('submit', this.submitHandler);\n    }\n\n    renderContent() {};\n\n    private gatherUserInput(): [string, string, number] | void {\n        const enteredTitle = this.titleInputElement.value;\n        const enteredDescription = this.descriptionInputElement.value;\n        const enteredPeople = this.peopleInputElement.value;\n\n        const titleValidatable: Validation.Validatable = {\n            value: enteredTitle,\n            required: true,\n        };\n        const descriptionValidatable: Validation.Validatable = {\n            value: enteredDescription,\n            required: true,\n            minLength: 5\n        };\n        const peopleValidatable: Validation.Validatable = {\n            value: enteredPeople,\n            required: true,\n            min: 1,\n            max: 5\n        };\n\n        //input field validation\n        if (\n            !Validation.validate(titleValidatable) ||\n            !Validation.validate(descriptionValidatable) ||\n            !Validation.validate(peopleValidatable)\n        ) {\n            alert('Invalid input! Try Again..');\n            return;\n        } else {\n            return [enteredTitle, enteredDescription, +enteredPeople];\n        }\n    }\n    //clear input fields after submit\n    private clearInputs() {\n        this.titleInputElement.value = '';\n        this.descriptionInputElement.value = '';\n        this.peopleInputElement.value = '';\n    }\n    //submit handler with an autobind decorator\n    @Autobind\n    private submitHandler(event: Event) {\n        event.preventDefault();\n        this.gatherUserInput();\n        const userInput = this.gatherUserInput();\n        if (Array.isArray(userInput)) {\n            const [title, desc, people] = userInput;\n            //creating the project\n            projectState.addProject(title, desc, people);\n            this.clearInputs();\n        }\n    }\n}","import { Draggable } from '../models/drag-drop';\nimport { Project } from '../models/project';\nimport Component  from './base-component';\nimport { autobind } from '../decorators/autobind';\n\n//rendering project items\nexport class ProjectItem extends Component<HTMLUListElement, HTMLLIElement> implements Draggable {\n    private project: Project;\n\n    //getter function to output correct text after number\n    get persons() {\n        if (this.project.people === 1) {\n            return '1 person';\n        } else {\n            return `${this.project.people} persons`;\n        }\n    }\n    \n    constructor(hostId: string, project: Project) {\n        super('single-project', hostId, false, project.id);\n        this.project = project;\n\n        this.configure();\n        this.renderContent();\n    }\n\n    @autobind\n    dragStartHandler(event: DragEvent) {\n        event.dataTransfer!.setData('text/plain', this.project.id);\n        event.dataTransfer!.effectAllowed = 'move';\n    }\n\n    dragEndHandler(event: DragEvent) {\n        event.preventDefault();\n        console.log('DragEnd');\n    }\n\n    configure() {\n        this.element.addEventListener('dragstart', this.dragStartHandler);\n        this.element.addEventListener('dragend', this.dragEndHandler);\n    }\n\n    renderContent() {\n        //this is the li element\n        this.element.querySelector('h2')!.textContent = this.project.title;\n        this.element.querySelector('h3')!.textContent = this.persons + ' assigned';\n        this.element.querySelector('p')!.textContent = this.project.description;\n    }\n}","import { DragTarget } from '../models/drag-drop';\nimport { Project, ProjectStatus } from '../models/project';\nimport Component from './base-component';\nimport { autobind } from '../decorators/autobind';\nimport { projectState } from '../state/project-state';\nimport { ProjectItem } from './project-item';\n\n//project list class(renders list field)\nexport class ProjectList extends Component<HTMLDivElement, HTMLElement> implements DragTarget {\n    assignedProjects: Project[];\n\n    constructor(private type: 'active' | 'finished') {\n        super('project-list', 'app', false, `${type}-projects`);\n        this.assignedProjects = [];\n\n        this.configure();\n        this.renderContent();\n    }\n\n    @autobind\n    dragOverHandler(event: DragEvent) {\n        if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n            //default for JS drag&drop events is to not allow dropping\n            event.preventDefault();\n            const listEl = this.element.querySelector('ul')!;\n            listEl.classList.add('droppable');\n        }\n    }\n\n    @autobind\n    dropHandler(event: DragEvent) {\n        event.preventDefault();\n        const projId = event.dataTransfer!.getData('text/plain');\n        projectState.moveProject(\n            projId, \n            this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished\n        );\n    }\n\n    @autobind\n    dragLeaveHandler(event: DragEvent) {\n        event?.preventDefault();\n        const listEl = this.element.querySelector('ul')!;\n        listEl.classList.remove('droppable');\n    }\n\n    configure() {\n        this.element.addEventListener('dragover', this.dragOverHandler);\n        this.element.addEventListener('dragleave', this.dragLeaveHandler);\n        this.element.addEventListener('drop', this.dropHandler);\n\n        projectState.addListener((projects: Project[]) => {\n            const relevantProjects = projects.filter(proj => {\n                if (this.type === 'active') {\n                    return proj.status === ProjectStatus.Active;\n                }\n                return proj.status === ProjectStatus.Finished;\n            });\n            this.assignedProjects = relevantProjects;\n            this.renderProjects();\n        });\n    };\n\n    //filling h2, ul, etc(empty) in the blank template\n    renderContent() {\n        const listId = `${this.type}-projects-list`;\n        //element is the section\n        this.element.querySelector('ul')!.id = listId;\n        //setting text content of h2\n        this.element.querySelector('h2')!.textContent = this.type.toUpperCase() + ' PROJECTS';\n    };\n\n    private renderProjects() {\n        const listEl = document.getElementById(\n            `${this.type}-projects-list`\n        )! as HTMLUListElement;\n        listEl.innerHTML = '';\n        for (const projItem of this.assignedProjects) {\n            new ProjectItem(this.element.querySelector('ul')!.id, projItem);\n        }\n    };\n}","import { ProjectInput } from './components/project-input';\nimport { ProjectList } from './components/project-list';\n\nnew ProjectInput();\nnew ProjectList('active');\nnew ProjectList('finished');"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","ProjectState","listeners","addListener","listenerFn","push","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","proj","slice","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","hostId","persons","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","projId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","projItem"],"sourceRoot":""}